// Code generated by genast.go; DO NOT EDIT.
package ast

import (
	"github.com/mkeesey/craftinginterpreters/token"
)

type Visitor interface {
	VisitBinary(*Binary) Visitor
	VisitGrouping(*Grouping) Visitor
	VisitLiteral(*Literal) Visitor
	VisitUnary(*Unary) Visitor
}

type Expr interface {
	Accept(Visitor) Visitor
}

type Binary struct {
	Left Expr
	Operator token.Token
}

func (e *Binary) Accept(visitor Visitor) Visitor {
	return visitor.VisitBinary(e)
}

type Grouping struct {
	Expression Expr
}

func (e *Grouping) Accept(visitor Visitor) Visitor {
	return visitor.VisitGrouping(e)
}

type Literal struct {
	value any
}

func (e *Literal) Accept(visitor Visitor) Visitor {
	return visitor.VisitLiteral(e)
}

type Unary struct {
	Operator token.Token
	Right Expr
}

func (e *Unary) Accept(visitor Visitor) Visitor {
	return visitor.VisitUnary(e)
}


