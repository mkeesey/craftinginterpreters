// Code generated by genast.go; DO NOT EDIT.
package ast

import (
	"fmt"

	"github.com/mkeesey/craftinginterpreters/pkg/token"
)

type ExprVisitor[T any] interface {
	VisitBinary(*Binary) T
	VisitGrouping(*Grouping) T
	VisitLiteral(*Literal) T
	VisitUnary(*Unary) T
	VisitExprVar(*ExprVar) T
}

func VisitExpr[T any](expr Expr, visitor ExprVisitor[T]) T {
	switch n := expr.(type) {
	case *Binary:
		return visitor.VisitBinary(n)
	case *Grouping:
		return visitor.VisitGrouping(n)
	case *Literal:
		return visitor.VisitLiteral(n)
	case *Unary:
		return visitor.VisitUnary(n)
	case *ExprVar:
		return visitor.VisitExprVar(n)
	default:
		panic(fmt.Sprintf("Unknown Expr type %T", expr))
	}
}

type Expr interface {
	expr()
}

type Binary struct {
	Left Expr
	Operator *token.Token
	Right Expr
}

func (b *Binary) expr() {}

type Grouping struct {
	Expression Expr
}

func (b *Grouping) expr() {}

type Literal struct {
	Value any
}

func (b *Literal) expr() {}

type Unary struct {
	Operator *token.Token
	Right Expr
}

func (b *Unary) expr() {}

type ExprVar struct {
	Name *token.Token
}

func (b *ExprVar) expr() {}


