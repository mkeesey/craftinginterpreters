// Code generated by genast.go; DO NOT EDIT.
package ast

import (
	"fmt"
)

type StmtVisitor interface {
	VisitExpression(*Expression)
	VisitPrint(*Print)
}

func VisitStmt(stmt Stmt, visitor StmtVisitor) {
	switch n := stmt.(type) {
	case *Expression:
		visitor.VisitExpression(n)
	case *Print:
		visitor.VisitPrint(n)
	default:
		panic(fmt.Sprintf("Unknown Stmt type %T", stmt))
	}
}

type Stmt interface {
	stmt()
}

type Expression struct {
	Expression Expr
}

func (b *Expression) stmt() {}

type Print struct {
	Expression Expr
}

func (b *Print) stmt() {}


