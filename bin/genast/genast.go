package main

import (
	"fmt"
	"html/template"
	"os"
	"path/filepath"
)

type Field struct {
	Name string
	Type string
}

type Types struct {
	Name   string
	Fields []Field
}

func main() {
	if len(os.Args) != 2 {
		fmt.Fprintf(os.Stderr, "Usage: %s <output dir>\n", os.Args[0])
		os.Exit(64)
	}

	astTypes := []Types{
		{
			"Binary",
			[]Field{
				{"Left", "Expr"},
				{"Operator", "*token.Token"},
				{"Right", "Expr"},
			},
		},
		{
			"Grouping",
			[]Field{
				{"Expression", "Expr"},
			},
		},
		{
			"Literal",
			[]Field{
				{"Value", "any"},
			},
		},
		{
			"Unary",
			[]Field{
				{"Operator", "*token.Token"},
				{"Right", "Expr"},
			},
		},
	}

	defineAst(os.Args[1], "expr", astTypes)
}

func defineAst(outputDir string, basename string, types []Types) {
	path := filepath.Join(outputDir, basename+".go")
	file, err := os.Create(path)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to create file: %s\n", path)
		os.Exit(1)
	}
	defer file.Close()

	tmpl := template.Must(template.New("ast").Parse(tmplBody))
	err = tmpl.Execute(file, types)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to write to file: %s\n", path)
		os.Exit(1)
	}
}

var (
	tmplBody = `// Code generated by genast.go; DO NOT EDIT.
package ast

import (
	"fmt"

	"github.com/mkeesey/craftinginterpreters/token"
)

type Visitor[T any] interface {
{{- range . }}
	Visit{{ .Name }}(*{{ .Name }}) T
{{- end }}
}

func Visit[T any](expr Expr, visitor Visitor[T]) T {
	switch n := expr.(type) {
{{- range . }}
	case *{{ .Name }}:
		return visitor.Visit{{ .Name }}(n)
{{- end }}
	default:
		panic(fmt.Sprintf("Unknown expression type %T", expr))
	}
}

type Expr interface {
	expr()
}

{{ range . -}}
type {{ .Name }} struct {
{{- range .Fields }}
	{{ .Name }} {{ .Type }}
{{- end }}
}

func (b *{{ .Name }}) expr() {}

{{ end }}
`
)
